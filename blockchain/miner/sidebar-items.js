initSidebarItems({"constant":[["BLOCK_PAYLOAD_SIZE","Size of the block payload"],["MINING_DIFFICULTY","Difficulty of mining"],["REFRESH_TIME","Time in sec for nodes healthcheck"],["TRAM_SIZE","Size of a message"]],"enum":[["Flag",""]],"fn":[["ask_for_id","This function is used when a new miner is joining an existing network, and needs a unique ID to be assigned to it *`socket` - the miner whom we are joining *`destination` - the joining miner IP address"],["concat_u8","Util Concat u8 array"],["create_miner","Used to create a new miner, then make it listen for incoming transactions *`miner_type` - a char representing what kind of miner we need to create ('c' if we are creating a network, 'j' if we are joining an existing network) *`socket` - the IP address on which the miner will listen for transactions *`destination` - the IP address of a miner in the network we are joining, if `miner_type` == 'j'"],["decode_id","Remove the padding from the ID field"],["decode_message","Decode the message received"],["decode_sockip","Remove the padding from the socket ip"],["encode_id","Add padding to the ID to allow fixed sized data structure when sending an ID"],["encode_message","Encode the sended message"],["encode_sockip","Add padding to the socket ip to allow fixed size data structure when sending data"],["handle_id","Used by a joining miner to decode the unique ID he was given *`stream` - a TCPStream instance of bytes which contains the ID"],["hashset_from_string","Pimped deserialized hashset"],["hashset_to_string","Pimped serialized hashset "]],"mod":[["block",""],["wallet",""]],"struct":[["Miner","This struct is used to represent a Miner in our Blockchain Network *`id` - the ID of our Miner, should be unique within the network *`network` - a HashSet containing the IDs and IP addresses of every Miner inside the network *`blocks` - a Vector containing the Blockchain *`sockip` - the IP address on which our Miner will listen for incoming transactions *`wallets` - a HashSet containing the IDs and IP addresses of every wallets binded to it *`payload` - TBD *`current_block_id` - TBD"]]});